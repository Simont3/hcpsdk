:mod:`hcpsdk.mapi` --- MAPI access
==================================

.. automodule:: hcpsdk.mapi
   :synopsis: Access to selected Management API (:term:`MAPI`) functionality.

**hcpsdk.mapi** provides access to selected :term:`MAPI` functions.

.. Tip::

   HCP needs to have the Management API (MAPI) enabled to make use
   of the classes in this module.


Classes
^^^^^^^

.. _hcpsdk_mapi_logs:

.. autoclass:: Logs

   **Class constants:**

   Log types:

      .. attribute:: L_ACCESS

         The log files *http_gateway_request.log.x*,
         *mapi_gateway_request.log.x* and *admin_request.log.x* contain all
         HTTP access messages that includes all of the HTTP based (SMC,
         TMC, MAPI, MQE, REST, HS3, HSwift) gateway logs. MAPI and Admin
         will contain all the system level access information while http
         gateway contains TMC and namespace access info.

      .. attribute:: L_SYSTEM

         This is a snapshot of the running system when the logs were
         captured. This includes the messages that are generated by HCP OS,
         the firewall and routing rules, the fiber channel info and many
         others and are always important as a first step for support to go
         over.

      .. attribute:: L_SERVICE

         These are logs generated when performing any of the service
         procedures such as when installing HCP software, adding a node,
         adding a LUN, node recovery etc.

      .. attribute:: L_APPLICATION

         These are logs from all the HCP specific services such as the JVM,
         the volume manager, storman etc.

   **Class methodes:**

   .. automethod:: prepare

      .. attribute:: returned dictionary (example):

         ::

            {'allowTenantsToMonitorNamespaces': 'true',
             'enableDNSFailover': 'true',
             'enableDomainAndCertificateSynchronization': 'true',
             'network': '[hcp_system]'}




.. _hcpsdk_mapi_replication:

.. autoclass:: Replication

   **Class constants:**

   Link types:

       .. attribute:: R_ACTIVE_ACTIVE

          Active/Active link

       .. attribute:: R_OUTBOUND

          Outbound link (active/passive)

       .. attribute:: R_INBOUND

          Inbound link (active/passive)

   Link activities:

       .. attribute:: R_SUSPEND

          Suspend a link (all link types)

       .. attribute:: R_RESUME

          Resume a suspended link (all link types)

       .. attribute:: R_RESTORE

          Restore a link (all link types)

       .. attribute:: R_FAILOVER

          Initiate a failover (all link types)

       .. attribute:: R_FAILBACK

          Initiate a failback (ACTIVE/ACTIVE links only)

       .. attribute:: R_BEGINRECOVERY

          Begin recovery (INBOUND links only)

       .. attribute:: R_COMPLETERECOVERY

          Complete recovery (INBOUND links only)

   **Class methodes:**

   .. automethod:: getreplicationsettings

      .. attribute:: returned dictionary (example):

         ::

            {'allowTenantsToMonitorNamespaces': 'true',
             'enableDNSFailover': 'true',
             'enableDomainAndCertificateSynchronization': 'true',
             'network': '[hcp_system]'}

   .. automethod:: getlinklist

      .. attribute:: returned list (example):

         ::

            ['hcp1-a-a-hcp2']

   .. automethod:: getlinkdetails

      .. attribute:: the returned dictionary (example):

         ::

            {'compression': 'false',
             'Connection': {'localHost': '192.168.0.52, 192.168.0.53, 192.168.0.54, '
                                         '192.168.0.55',
                            'localPort': '5748',
                            'remoteHost': '192.168.0.56, 192.168.0.57, 192.168.0.58, '
                                          '192.168.0.59',
                            'remotePort': '5748'},
             'description': 'active/active link between HCP1 and HCP2',
             'encryption': 'false',
             'failoverSettings': {'local': {'autoFailover': 'false',
                                            'autoFailoverMinutes': '120'},
                                  'remote': {'autoFailover': 'false',
                                             'autoFailoverMinutes': '120'}},
             'id': 'b9c488db-f641-486e-a8b4-56810faf23cd',
             'name': 'hcp1-a-a-hcp2',
             'priority': 'OLDEST_FIRST',
             'statistics': {'bytesPending': '0',
                            'bytesPendingRemote': '0',
                            'bytesPerSecond': '0.0',
                            'bytesReplicated': '0',
                            'errors': '0',
                            'errorsPerSecond': '0.0',
                            'objectsPending': '0',
                            'objectsPendingRemote': '0',
                            'objectsReplicated': '0',
                            'operationsPerSecond': '0.0',
                            'upToDateAsOfMillis': '1419975449113',
                            'upToDateAsOfString': '2014-12-30T22:37:29+0100'},
             'status': 'GOOD',
             'statusMessage': 'Synchronizing data',
             'suspended': 'false',
             'type': 'ACTIVE_ACTIVE'}


   .. automethod:: setreplicationlinkstate


Exceptions
^^^^^^^^^^

.. autoexception:: ReplicationSettingsError

   .. attribute:: reason

      An error description.


Example
^^^^^^^

::

    >>> import hcpsdk.mapi
    >>> from pprint import pprint
    >>>
    >>> auth = hcpsdk.NativeAuthorization('service', 'service01')
    >>> t = hcpsdk.Target('admin.hcp1.snomis.local', auth, port=9090)
    >>> r = hcpsdk.mapi.Replication(t)
    >>> l = r.getlinklist()
    >>> l
    ['hcp1--<-->--hcp2']
    >>> d = r.getlinkdetails(l[0])
    >>> pprint(d)
    {'compression': 'false',
     'connection': {'localHost': '192.168.0.52, 192.168.0.53, '
                                 '192.168.0.54, 192.168.0.55',
                    'localPort': '5748',
                    'remoteHost': '192.168.0.56, 192.168.0.57, '
                                  '192.168.0.58, 192.168.0.59',
                    'remotePort': '5748'},
     'description': 'active/active replication between HCP1 and HCP2',
     'encryption': 'false',
     'failoverSettings': {'local': {'autoFailover': 'false',
                                    'autoFailoverMinutes': '120'},
                          'remote': {'autoFailover': 'false',
                                     'autoFailoverMinutes': '120'}},
     'id': '81b6df01-2bda-4094-aed8-0c47e68bd820',
     'name': 'hcp1--<-->--hcp2',
     'priority': 'OLDEST_FIRST',
     'statistics': {'bytesPending': '0',
                    'bytesPendingRemote': '0',
                    'bytesPerSecond': '0.0',
                    'bytesReplicated': '0',
                    'errors': '0',
                    'errorsPerSecond': '0.0',
                    'objectsPending': '0',
                    'objectsPendingRemote': '0',
                    'objectsReplicated': '0',
                    'operationsPerSecond': '0.0',
                    'upToDateAsOfMillis': '1422701963994',
                    'upToDateAsOfString': '2015-01-31T11:59:23+0100'},
     'status': 'GOOD',
     'statusMessage': 'Synchronizing data',
     'suspended': 'false',
     'type': 'ACTIVE_ACTIVE'}
    >>>
